@*@page "/myprofile/{id}"*@
@page "/myprofile"
@using WeDancin.Domain.Entities.Accounts
@inject NavigationManager _navigationManager
@inject IUserRepository _userRepository
@inject IUserDetailsRepository _userDetailsRepository

<style>
    /* || PAGE LAYOUT STYLES */
    .page {
        height: 100%;
        width: 100%;
    }

    .box-titles {
        font-weight: 500;
        letter-spacing: -0.02em;
        color: #6F007D;
        display: flex;
        align-items: center;
        margin-bottom: 16px;
    }

    .curriculumTextarea {
        padding-top: 50px !important;
    }

        .curriculumTextarea:focus {
            padding-top: 50px !important;
        }

    .edit-button {
        width: max-content;
        margin-top: 20px;
        position: absolute;
        top: 25px;
        left: 202px;
    }

    .filter-icon {
        display: flex;
        flex-direction: column;
        justify-content: center;
        position: relative;
        right: 8px;
    }

    .grid-2 {
        display: grid;
        grid-template-columns: auto;
        grid-template-rows: auto auto auto auto auto;
        grid-gap: 24px;
    }

    .profile-grid {
        display: grid;
        grid-template-columns: 30% 65%;
        grid-gap: 24px;
        justify-content: center;
        position: absolute;
        top: 120px;
        max-width: 1140px;
        margin: 15px 0 0 56px;
        padding-bottom: 50px;
        z-index: 3;
    }

    .publish-button {
        position: absolute;
        left: 77.7%;
        top: 1014px;
        width: 219px;
        height: 58px;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        color: #aba8ac;
    }

    .section-1 {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        justify-content: flex-start;
    }

    .section-2 {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
    }

    .social-box {
        margin: 12px 0;
    }

    .white-box {
        height: fit-content;
        padding: 24px;
        background: #FFFFFF;
        box-shadow: 0px 1px 5px rgba(66, 0, 74, 0.22), 0px 0.385185px 1.59259px rgba(66, 0, 74, 0.13363), 0px 0.0814815px 0.407407px rgba(66, 0, 74, 0.0863704);
        border-radius: 20px;
    }

    #avatar-placeholder-tiktok {
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        width: 158px;
        height: 289px;
        background: #F5F5F5;
        border-radius: 20px;
    }

    #avatar-placeholder {
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        width: 96px;
        height: 96px;
        background: #F5F5F5;
        border-radius: 20px;
    }

    #avatar-placeholder-insta {
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        width: 158px;
        height: 158px;
        background: #F5F5F5;
        border-radius: 20px;
    }

    #box-text {
        letter-spacing: -0.02em;
        color: #413A42;
        margin: 5px;
    }

    #upper-text {
        position: relative;
        top: 80px;
        min-width: 1100px;
        width: max-content;
        z-index: 3;
    }
</style>

<SideMenuComponent></SideMenuComponent>

<header>
    <img src="/images/Lines/create-profile.svg" alt="Linhas orgânicas coloridas" style="position: absolute; top: 0; right: 0; z-index: 1;" />
    <div style="display: flex; flex-direction: column; align-items: end;"><button class="dark-red-button long-button" style="width: 219px; margin-top: 20px;">Editar meu perfil</button></div>
</header>



<div style="display: flex; flex-direction: column; align-items: center;">
    <div><button class="light-purple-button long-button edit-button">Editar meu perfil</button></div>
    <section class="profile-grid">
        <div class="white-box" style="display: flex; flex-direction: column;">
            <div class="section-1">
                <div style="margin-right: 14px; display: flex; flex-direction: column; align-items: center; ">
                    <div id="avatar-placeholder">
                        <img src="@user.ProfileImage" style="width: 90px;" />
                    </div>
                    <ChipsComponent chipColor="purple-chip" chipHeight="25px" chipWidth="max-content" chipStyleAddOn="position: relative; bottom: 12.5px;"><i class="bi bi-star" style="margin-right: 5px; color: #51005B;"></i> 5,0</ChipsComponent>
                </div>
                @* Alterar pra buscar no bd *@
                <div id="profile-infos">

                    @if (!String.IsNullOrEmpty(user.Name))
                    {
                        <h4 style="margin: 0 0 3px 0;">@user.Name</h4> }
                    else
                    {
                        <h4 style="margin: 0 0 3px 0;">@user.Username</h4>}


                    <p class="under-text" style="font-size: 14px; margin: 0 0 8px 0;">@user.Username</p>

                    <p style="font: 400 16px/23px Lato; color: #7F7481; margin-bottom: 8px;"><i class="bi bi-geo-alt" style="font-size: 13px; position: relative; bottom: .5px; margin-right: 6px; "></i>Belo Horizonte, MG</p>
                </div>
            </div>

            <hr />

            <div>
                <h4 style="font-weight: 500;">Sobre o professor</h4>
                @* Alterar pra buscar no bd *@
                <p class="about-text">
                    @userDetails.AboutMe
                </p>
            </div>

            <hr />

            <div class="section-2">
                <h4 style="font-weight: 500;">Faça aulas de</h4>
                @* Alterar pra buscar no bd *@
                @* Chips das aulas *@
                <div style="display: flex; flex-wrap: wrap;">
                    @if (danceModalities.Count > 0)
                    {
                        @foreach (var item in danceModalities)
                        {
                            <ChipsComponent chipColor="purple-chip" chipWidth="max-content" chipHeight="30px">@item</ChipsComponent>}
                    }

                </div>
            </div>
        </div>

        <div class="grid-2">
            <div class="white-box">
                <div style="display: flex; flex-direction: column;">
                    <div class="section-3">
                        <h4 style="font-weight: 500;">Carreira e experiências</h4>
                        @* Alterar pra buscar no bd *@
                        <p class="about-text">
                            @userDetails.DanceCareer
                        </p>
                    </div>

                    <hr />

                    <div class="section-3">
                        <h4 style="font-weight: 500;">Informações adicionais</h4>
                        @* Alterar pra buscar no bd *@
                        <p class="about-text">
                            @userDetails.AdditionalInformation
                        </p>
                    </div>
                </div>
            </div>

            <div style="display: flex; flex-direction: column; flex-wrap: wrap; max-width: 752px; margin-top: 24px;">
                <h4 style="font-weight: 500; margin-bottom: 16px;">Explore as aulas</h4>
                <div style="display: flex; flex-direction: row; flex-wrap: wrap; justify-content: space-between;">
                    <div class="white-box" style="width: 364px; display: grid; grid-template-columns: 24px 324px; height: 58px; padding: 4px 16px;">
                        <div><i class="bi bi-calendar2-week" style="position: relative; top: 12px;"></i></div>
                        <div style="display: flex; flex-direction: column; margin-left: 5px;">
                            <p style="margin: 3px 0; font-size: 12px;">Data</p>
                            <p style="margin: 0;">Dom, 01 de agosto - Dom, 15 de agosto</p>
                        </div>
                    </div>
                    <div class="white-box" style="width: 364px; display: grid; grid-template-columns: 324px 24px; height: 58px; padding: 4px 16px;">
                        <div style="display: flex; flex-direction: column;">
                            <p style="margin: 3px 0; font-size: 12px;">Filtre por</p>
                            <p style="margin: 0;">Todos os ritmos</p>
                        </div>
                        <div class="filter-icon"><i class="bi bi-funnel"></i></div>

                    </div>
                </div>
            </div>

            <div style="display: flex; flex-direction: column; align-items: center;">
                <h4 style="margin-top: 40px; font-weight: 400; color: #817C82; ">Você ainda não possui aulas publicadas</h4>
                <button class="dark-purple-button long-button" style="width: max-content; margin-top: 20px;">Adicionar primeira aula</button>
            </div>
            <div style="margin-top: 26px; display: flex; flex-direction: column;">

                @*@if (!String.IsNullOrEmpty(userDetails.Instagram))
                {*@
                    <div class="white-box social-box">
                        <div style="display: flex; flex-direction: column;">
                            <div class="section-3">
                                <h4 style="font-weight: 500;">Instagram de @userDetails.Instagram</h4>
                                @* Alterar pra buscar no bd *@
                                <div style="margin-top: 24px; display: grid; grid-template-columns: auto auto auto auto; justify-content: space-around; grid-gap: 24px; ">
                                    <div id="avatar-placeholder-insta">
                                        <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                    </div>
                                    <div id="avatar-placeholder-insta">
                                        <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                    </div>
                                    <div id="avatar-placeholder-insta">
                                        <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                    </div>
                                    <div id="avatar-placeholder-insta">
                                        <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                    </div>
                                    <div id="avatar-placeholder-insta">
                                        <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                    </div>
                                    <div id="avatar-placeholder-insta">
                                        <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                    </div>
                                    <div id="avatar-placeholder-insta">
                                        <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                    </div>
                                    <div id="avatar-placeholder-insta">
                                        <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>@*}*@


                @*@if (!String.IsNullOrEmpty(userDetails.TikTok))
                    {*@
                <div class="white-box social-box">
                    <div style="display: flex; flex-direction: column;">
                        <div class="section-3">
                            <h4 style="font-weight: 500;">TikTok de @userDetails.TikTok</h4>
                            @* Alterar pra buscar no bd *@
                            <div style="margin-top: 24px; display: grid; grid-template-columns: auto auto auto auto; justify-content: space-around; grid-gap: 24px; ">
                                <div id="avatar-placeholder-tiktok">
                                    <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                </div>
                                <div id="avatar-placeholder-tiktok">
                                    <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                </div>
                                <div id="avatar-placeholder-tiktok">
                                    <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                </div>
                                <div id="avatar-placeholder-tiktok">
                                    <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                </div>
                                <div id="avatar-placeholder-tiktok">
                                    <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                </div>
                                <div id="avatar-placeholder-tiktok">
                                    <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                </div>
                                <div id="avatar-placeholder-tiktok">
                                    <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                </div>
                                <div id="avatar-placeholder-tiktok">
                                    <img src="/images/Brand/Logo.svg" style="width: 90px;" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>@*}*@

            </div>
        </div>


    </section>
</div>



@code{ [Parameter] public string id { get; set; }
    private UserDetails userDetails = new UserDetails();
    private User user = new User();
    private string username = String.Empty;
    private List<string> danceModalities = new List<string>();
    private bool erro = false;
    private string message = String.Empty;

    private Guid UserId { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRun)
    {
        if (firstRun)
        {
            try
            {
                UserId = Guid.Parse(id);

                var apiResponse = await _userDetailsRepository.GetAsync(UserId);

                if (!apiResponse.Erro)
                {
                    //var apiResponseGetUser = await _userRepository.GetAsync(UserId);

                    //user = _userRepository.UserRepositoryUserMiddleware(apiResponseGetUser);

                    userDetails = _userDetailsRepository.UserRepositoryUserDetailsMiddleware(apiResponse.result);

                    danceModalities.AddRange(userDetails.DanceModalities.Split(";"));
                }
                else
                {
                    erro = true;
                    message = apiResponse.Message;
                }

            }
            catch (Exception ex)
            {
                throw;
            }


            StateHasChanged();
        }

    }
}